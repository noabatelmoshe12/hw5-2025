import json
import pathlib
import sys
from typing import Union, Tuple
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        try:
            self.data_fname = pathlib.Path(data_fname)
        except TypeError:
            raise TypeError("data_fname must be a string or a Path object")

        if not self.data_fname.exists():
            raise ValueError("File not found")
        self.data = None

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        with open(self.data_fname, 'r') as f:
            self.data = pd.DataFrame(json.load(f))
        self.data.replace("nan", np.nan, inplace=True)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
          Number of people in a given bin
        bins : np.ndarray
          Bin edges
        """
        age_data = pd.to_numeric(self.data['age'], errors='coerce').dropna()
        hist, bins = np.histogram(age_data, bins=np.arange(0, 110, 10))
        
        # Make sure the output directory exists
        if not os.path.exists('output'):
            os.makedirs('output')
        
        plt.hist(age_data, bins=np.arange(0, 110, 10), edgecolor='black')
        plt.xlabel('Age')
        plt.ylabel('Count')
        plt.title('Age Distribution')
        plt.savefig('output/age_distribution.png')
        if 'pytest' not in sys.modules:
            plt.show()
        return hist, bins

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
          A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
          the (ordinal) index after a reset.
        """
        def is_valid_email(email: str) -> bool:
            if not isinstance(email, str):
                return False
            if email.startswith('@') or email.endswith('@'):
                return False
            if email.startswith('.') or email.endswith('.'):
                return False
            if email.count('@') != 1:
                return False
            at_index = email.index('@')
            if at_index + 1 >= len(email) or email[at_index + 1] == '.':
                return False
            if '.' not in email:
                return False
            return True

        valid_df = self.data[self.data['email'].apply(is_valid_email)].reset_index(drop=True)
        return valid_df

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
       all questions, and replaces that missing value with the mean of the
       other grades for that student.

       Returns
       -------
       df : pd.DataFrame
         The corrected DataFrame after insertion of the mean grade
       arr : np.ndarray
             Row indices of the students that their new grades were generated
       """
        df = self.data.copy()
        q_cols = ['q1', 'q2', 'q3', 'q4', 'q5']
        rows_to_correct = df[q_cols].isnull().any(axis=1)
        indices = np.where(rows_to_correct)[0]

        for i in indices:
            row_mean = df.loc[i, q_cols].mean()
            df.loc[i, q_cols] = df.loc[i, q_cols].fillna(row_mean)

        return df, indices

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
       with it.

       If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
       score should be NA. Otherwise, the score is simply the mean of the other grades.
       The datatype of score is UInt8, and the floating point raw numbers should be
       rounded down.

       Parameters
       ----------
       maximal_nans_per_sub : int, optional
           Number of allowed NaNs per subject before giving a NA score.

       Returns
       -------
       pd.DataFrame
           A new DF with a new column - "score".
       """
        df = self.data.copy()
        q_cols = ['q1', 'q2', 'q3', 'q4', 'q5']

        nan_counts = df[q_cols].isnull().sum(axis=1)
        scores = df[q_cols].mean(axis=1)
        scores[nan_counts > maximal_nans_per_sub] = np.nan
        df['score'] = scores.apply(lambda x: np.floor(x) if pd.notna(x) else pd.NA)
        df['score'] = df['score'].astype('UInt8')

        return df

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
       and the score for all five questions.

       Returns
       -------
       pd.DataFrame
           A DataFrame with a MultiIndex containing the gender and whether the subject is above
           40 years of age, and the average score in each of the five questions.
       """
        df = self.data.copy()
        df['age'] = pd.to_numeric(df['age'], errors='coerce')
        df.dropna(subset=['age'], inplace=True)
        df['age'] = df['age'].astype(int)
        
        df['age_group'] = df['age'] > 40
        
        q_cols = ['q1', 'q2', 'q3', 'q4', 'q5']
        for col in q_cols:
            df[col] = pd.to_numeric(df[col], errors='coerce')

        grouped = df.groupby(['gender', 'age_group'])[q_cols].mean()
        grouped.index.names = ['gender', 'age']
        return grouped


if __name__ == "__main__":
    analysis = QuestionnaireAnalysis('data.json')
    analysis.read_data()
    analysis.show_age_distrib()
